#lang racket

(define (fun-ii n)
  (let ((memo (make-vector (+ n 1))))
    (vector-set! memo 0 0)
    (when (>= n 1)
      (vector-set! memo 1 1))
    (let loop ((i 2))
      (unless (> i n)
        (vector-set! memo i (+ (vector-ref memo (- i 1)) (vector-ref memo (- i 2))))
        (loop (+ i 1))
      )
    )
    (let build-tree ((k n))
      (if (<= k 1)
        (vector (vector-ref memo k) (vector) (vector))
        (vector (vector-ref memo k)
                (build-tree (- k 1))
                (build-tree (- k 2))
        )
      )
    )
  )
)


(fun-ii 0) ; => #(0 #() #())
(fun-ii 1) ; => #(1 #() #())
(fun-ii 2) ; => #(1 #(1 #() #()) #(0 #() #()))
